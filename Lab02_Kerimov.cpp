#include <iostream>
#include <cmath>



int main()
{
    // a и b - точки отрезка AB | c и d - точки, через которые проходит прямая
	int x_a, y_a, x_b, y_b, x_c, y_c, x_d, y_d;

	scanf_s("%d %d %d %d %d %d %d %d", &x_a, &y_a, &x_b, &y_b, &x_c, &y_c, &x_d, &y_d);


	// проверка на вхождение всех точек в диапазон [-1000, 1000]
	if ((x_a <= 1000 && x_a >= -1000) && (y_a <= 1000 && y_a >= -1000) && (x_b <= 1000 && x_b >= -1000) && (y_b <= 1000 && y_b >= -1000) &&
		(x_c <= 1000 && x_c >= -1000) && (y_c <= 1000 && y_c >= -1000) && (x_d <= 1000 && x_d >= -1000) && (y_d <= 1000 && y_d >= -1000))
	{
		float f1, f2;
		int A = y_c - y_d;
		int B = x_d - x_c;
		int C = (x_c * y_d) - (x_d * y_c);
		f1 = A * x_a + B * y_a + C;
		f2 = A * x_b + B * y_b + C;


		// случай, когда концы отрезка лежат в разных полуплоскостях (то есть прямая пересекает отрезок), тогда расстояние равно 0
		if ((f1 < 0 && f2 > 0) || (f1 > 0 && f2 < 0) || (f1 == 0) || (f2 == 0))
		{
			printf("%.2f", 0);
			return 0;
		}



		// случай, когда прямая и отрезок не пересекаются (параллельность тоже учитывается)
		float d1, d2; // расстояние до 1 и 2 концов отрезка соответственно

		
		d1 = abs((y_d - y_c) * x_a - (x_d - x_c) * y_a + x_d * y_c - y_d * x_c);
		d1 = d1 / pow((pow((y_d - y_c), 2) + pow((x_d - x_c), 2)), 0.5); // расстояние от прямой до точки a


	
		d2 = abs((y_d - y_c) * x_b - (x_d - x_c) * y_b + x_d * y_c - y_d * x_c);
		d2 = d2 / pow((pow((y_d - y_c), 2) + pow((x_d - x_c), 2)), 0.5); // расстояние от прямой до точки b

		// берем минимальное расстояние из найденных двух
		printf("%.2f", fmin(d1, d2));
	}

	// иначе, если одна из координат не входит в диапазон [-1000, 1000]
	else
	{
		printf("%s", "invalid input data");
	}
}

